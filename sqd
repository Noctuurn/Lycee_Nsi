liste_chainee = ("n",("s",("i",None)))

def creer_liste() -> tuple :
    lis = (None,None)
    return lis

def liste_vide(lis:tuple) -> bool:
    if lis == (None,None):
        return True
    else : 
        return False

def inserer(lis:tuple,elt):
    lis = (elt,lis)
    return lis 

def suppr(lis):
    sup,lis = lis[0],lis[1]
    return sup

def tete(lis):
    return lis[0]

def queue(lis):
    return lis[1]

def compte(lis):
    compteur = 0
    for i in lis:
        if lis[i] != None :
            compteur += 1
        else :
            return compteur
        


if __name__ == "__main__":
    print(liste_chainee)
    creer_liste()
    liste_vide(creer_liste)

    inserer(liste_chainee,"TG6")
    suppr(liste_chainee)
    tete(liste_chainee)
    queue(liste_chainee)
    print(compte(liste_chainee))
    print("Tous les tests unitaires marchent !")

class Cellule:

    def __init__(self,elt,cdr):
        self.elt = elt
        self.cdr = cdr

    def creer_liste(self):
        '''
        Renvoie une liste vide
        '''
        lis = (None,None)
        return lis
    
    def liste_vide(self,lis):
        '''
        Renvoie un booléen indiquant si la liste rentrée en paramètre est vide
        '''
        if lis == (None,None):
            return True
        else:
            return False

    def inserer(self,lis,elt):
        '''
        Insère elt en tete de la liste lis, renvoie une nouvelle liste ou modifie la liste en place
        '''
        lis = (elt,(lis))
        return lis
    
    def suppr(self,lis):
        '''
        Supprime la tete d'une liste et renvoie la valeur de cette tete
        '''

        return

    def tete(self,lis):
        '''
        Renvoie l'élément en tete de liste
        '''
        ...
    def queue(self,lis):
        '''
        Renvoie la liste privée le l'élément en tete de liste
        '''
        ...
    def compte(self,lis):
        '''
        Compte le nombre d'éléments dans la liste et compte ce nombre
        '''
        return len(lis)
    
if __name__ == "__main__" :
    ...
